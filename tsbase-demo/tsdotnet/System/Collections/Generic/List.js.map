{"version":3,"file":"List.js","sourceRoot":"","sources":["../../../../tsbase/src/System/Collections/Generic/List.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAEnD,MAAM,WAAe,SAAQ,UAAa;IAyBxC,YAAY,SAAe;QACzB,KAAK,EAAE,CAAC;QAzBV;;WAEG;QACI,UAAK,GAAW,CAAC,CAAC;QAEzB;;WAEG;QACI,SAAI,GAAa,IAAI,KAAK,EAAK,CAAC;QAkBrC,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;YACjC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;SAC/B;QAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IArBD;;;OAGG;IACO,KAAK,CAAC,IAAc;QAC5B,OAAO,IAAI,IAAI,CAAI,IAAI,CAAC,CAAC;IAC3B,CAAC;IAiBD;;;OAGG;IACI,GAAG,CAAC,MAAS;QAClB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,QAAkB;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,KAAK;QACV,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,MAAS;QACvB,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEjD,IAAI,CAAC,WAAW,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9C,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACjD,WAAW,GAAG,eAAe,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;SAC/D;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,KAAe,EAAE,UAAmB,EAAE,QAAiB;QACnE,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAClD,KAAK,IAAI,KAAK,GAAG,UAAU,EAAE,KAAK,GAAG,QAAQ,EAAE,KAAK,EAAE,EAAE;YACtD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrB;IACH,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,KAA2B;QACvC,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAChE,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;gBAClB,MAAM,GAAG,IAAI,CAAC;aACf;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,IAAI,CAAC,KAA2B;QACrC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACrD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;gBAClB,OAAO,CAAC,OAAO,CAAC,CAAC;aAClB;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,KAA2B;QACxC,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/D,OAAO,IAAI,IAAI,CAAI,gBAAgB,CAAC,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACI,SAAS,CAAC,KAA2B,EAAE,UAAmB,EAAE,QAAiB;QAClF,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAClD,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,QAAQ,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1D,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;gBAClB,KAAK,GAAG,CAAC,CAAC;aACX;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,KAA2B;QACzC,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE;YACpD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;gBAClB,OAAO,CAAC,OAAO,CAAC,CAAC;aAClB;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,aAAa,CAAC,KAA2B,EAAE,UAAmB,EAAE,QAAiB;QACtF,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,QAAQ,GAAG,QAAQ,IAAI,QAAQ,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAC9E,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,UAAU,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3D,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;gBAClB,KAAK,GAAG,CAAC,CAAC;aACX;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,MAAwB;QACrC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC1B,MAAM,CAAC,OAAO,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,QAAQ,CAAC,KAAa,EAAE,KAAa;QAC1C,MAAM,KAAK,GAAG,IAAI,IAAI,EAAK,CAAC;QAC5B,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAClC,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SACpB;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;OAIG;IACI,OAAO,CAAC,IAAO,EAAE,UAAmB;QACzC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAClE,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gBACzD,KAAK,GAAG,CAAC,CAAC;aACX;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,IAAO,EAAE,QAAiB;QAC3C,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAChD,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAClD,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gBACzD,KAAK,GAAG,CAAC,CAAC;aACX;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,KAA2B;QAC3C,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,KAAK,IAAI,EAAE,KAAK,EAAE,EAAE;YACxE,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;gBACnB,MAAM,GAAG,KAAK,CAAC;aAChB;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,IAAI,CAAC,UAA6B;QACvC,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAI,EAAE,CAAI,EAAE,EAAE;gBAC5B,IAAI,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE;oBACjC,OAAO,CAAC,CAAC,CAAC;iBACX;qBAAM,IAAI,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE;oBACxC,OAAO,CAAC,CAAC;iBACV;qBAAM;oBACL,OAAO,CAAC,CAAC;iBACV;YACH,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;SAClB;IACH,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,KAAa,EAAE,IAAO;QAClC,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,EAAE;YAC3C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,8BAA8B,IAAI,CAAC,IAAI,CAAC,MAAM,oBAAoB,KAAK,EAAE,CAAC,CAAC;SAC5F;IACH,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,KAAa,EAAE,UAAmB;QACnD,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,EAAE;YAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;gBACzC,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;aACzC;YACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,8BAA8B,IAAI,CAAC,IAAI,CAAC,MAAM,oBAAoB,KAAK,EAAE,CAAC,CAAC;SAC5F;IACH,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,IAAO;QACnB,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,SAAS,IAAI,CAAC,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,KAA2B;QAC1C,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACrD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;gBAClB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACrB,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,CAAC;aACT;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,KAAa;QAC3B,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,EAAE;YAC3C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,8BAA8B,IAAI,CAAC,IAAI,CAAC,MAAM,oBAAoB,KAAK,EAAE,CAAC,CAAC;SAC5F;IACH,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,KAAa,EAAE,KAAa;QAC7C,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,GAAG,KAAK,EAAE;YAChF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC/B,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,8BAA8B,IAAI,CAAC,IAAI,CAAC,MAAM,oBAAoB,KAAK,oBAAoB,KAAK,EAAE,CAAC,CAAC;SACrH;IACH,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACI,YAAY,CAAC,KAAa,EAAE,KAAa;QAC9C,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACpD,YAAY,CAAC,OAAO,EAAE,CAAC;QACvB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,IAAI,CAAI,YAAY,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,0CAA0C;IAClC,gBAAgB;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAChC,CAAC;CAGF","sourcesContent":["import { Enumerable } from '../../Linq/Enumerable';\n\nexport class List<T> extends Enumerable<T> {\n  /**\n   * Gets the number of elements contained in the List<T>.\n   */\n  public Count: number = 0;\n\n  /**\n   * Gets or sets the element at the specified index.\n   */\n  public Item: Array<T> = new Array<T>();\n\n  /**\n   * Implement abstract enumerable contract\n   * @param item \n   */\n  protected Clone(item: Array<T>): Enumerable<T> {\n    return new List<T>(item);\n  }\n\n  /**\n   * List<T>() Initializes a new instance of the List<T> class that is empty and has the default initial capacity.\n   * List<T>(IEnumerable<T>) Initializes a new instance of the List<T> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.\n   */\n  constructor();\n  constructor(initParam: Array<T>);\n  constructor(initParam?: any) {\n    super();\n    if (initParam && initParam.length) {\n      this.Item = initParam.slice();\n    }\n\n    this.updateProperties();\n  }\n\n  /**\n   * Adds an object to the end of the List<T>.\n   * @param object \n   */\n  public Add(object: T) {\n    this.Item.push(object);\n    this.updateProperties();\n  }\n\n  /**\n   * Adds the elements of the specified collection to the end of the List<T>.\n   * @param elements \n   */\n  public AddRange(elements: Array<T>) {\n    this.Item = this.Item.concat(elements);\n    this.updateProperties();\n  }\n\n  /**\n   * Removes all elements from the List<T>.\n   */\n  public Clear(): void {\n    this.Item = new Array();\n    this.updateProperties();\n  }\n\n  /**\n   * Determines whether an element is in the List<T>.\n   * Currently checks if every key on the parameter object matches every key on a member (contained) object\n   * @param object \n   */\n  public Contains(object: T): boolean {\n    let isContained = this.Item.indexOf(object) >= 0;\n\n    if (!isContained && typeof object === 'object') {\n      const stringifiedList = JSON.stringify(this.Item);\n      const stringifiedObject = JSON.stringify(object);\n      isContained = stringifiedList.indexOf(stringifiedObject) >= 0;\n    }\n    return isContained;\n  }\n\n  /**\n   * Copies the List<T> or a portion of it to an array.\n   * @param array \n   * @param arrayIndex \n   */\n  public CopyTo(array: Array<T>, startIndex?: number, endIndex?: number): void {\n    startIndex = startIndex ? startIndex : 0;\n    endIndex = endIndex ? endIndex : this.Item.length;\n    for (let index = startIndex; index < endIndex; index++) {\n      const element = this.Item[index];\n      array.push(element);\n    }\n  }\n\n  /**\n   * Determines whether the List<T> contains elements that match the conditions defined by the specified predicate.\n   * @param match\n   */\n  public Exists(match: (item: T) => boolean): boolean {\n    let answer = false;\n    for (let index = 0; index < this.Item.length && !answer; index++) {\n      const element = this.Item[index];\n      if (match(element)) {\n        answer = true;\n      }\n    }\n    return answer;\n  }\n\n  /**\n   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire List<T>.\n   * @param match\n   */\n  public Find(match: (item: T) => boolean): T | null {\n    for (let index = 0; index < this.Item.length; index++) {\n      const element = this.Item[index];\n      if (match(element)) {\n        return (element);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Retrieves all the elements that match the conditions defined by the specified predicate.\n   * @param match \n   */\n  public FindAll(match: (item: T) => boolean): List<T> {\n    const matchingElements = this.Item.filter(item => match(item));\n    return new List<T>(matchingElements);\n  }\n\n  /**\n   * Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within the List<T> or a portion of it. This method returns -1 if an item that matches the conditions is not found.\n   * @param match \n   * @param startIndex \n   * @param endIndex \n   */\n  public FindIndex(match: (item: T) => boolean, startIndex?: number, endIndex?: number): number {\n    startIndex = startIndex ? startIndex : 0;\n    endIndex = endIndex ? endIndex : this.Item.length;\n    let index = -1;\n    for (let i = startIndex; i < endIndex && index === -1; i++) {\n      const element = this.Item[i];\n      if (match(element)) {\n        index = i;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire List<T>.\n   * @param match\n   */\n  public FindLast(match: (item: T) => boolean): T | null {\n    for (let index = this.Count - 1; index >= 0; index--) {\n      const element = this.Item[index];\n      if (match(element)) {\n        return (element);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within the List<T> or a portion of it.\n   * @param match\n   * @param startIndex \n   * @param endIndex \n   */\n  public FindLastIndex(match: (item: T) => boolean, startIndex?: number, endIndex?: number): number {\n    startIndex = startIndex ? startIndex : 0;\n    endIndex = endIndex && endIndex <= this.Count - 1 ? endIndex : this.Count - 1;\n    let index = -1;\n    for (let i = endIndex; i >= startIndex && index === -1; i--) {\n      const element = this.Item[i];\n      if (match(element)) {\n        index = i;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Performs the specified action on each element of the List<T>.\n   * @param action \n   */\n  public ForEach(action: (item: T) => any): void {\n    this.Item.forEach(element => {\n      action(element);\n    });\n  }\n\n  /**\n   * Creates a shallow copy of a range of elements in the source List<T>.\n   * @param index \n   * @param count \n   */\n  public GetRange(index: number, count: number): List<T> {\n    const range = new List<T>();\n    for (let i = index; i < count; i++) {\n      const element = this.Item[i];\n      range.Add(element);\n    }\n    return range;\n  }\n\n  /**\n   * Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the List<T> that extends from the specified index to the last element.\n   * @param item \n   * @param startIndex \n   */\n  public IndexOf(item: T, startIndex?: number): number {\n    startIndex = startIndex ? startIndex : 0;\n    let index = -1;\n    for (let i = startIndex; i < this.Item.length && index === -1; i++) {\n      if (JSON.stringify(item) === JSON.stringify(this.Item[i])) {\n        index = i;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Returns the zero-based index of the last occurrence of a value in the List<T> or in a portion of it.\n   * @param item \n   * @param endIndex \n   */\n  public LastIndexOf(item: T, endIndex?: number): number {\n    endIndex = endIndex ? endIndex : this.Count - 1;\n    let index = -1;\n    for (let i = endIndex; i >= 0 && index === -1; i--) {\n      if (JSON.stringify(item) === JSON.stringify(this.Item[i])) {\n        index = i;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Determines whether every element in the List<T> matches the conditions defined by the specified predicate.\n   * @param match \n   */\n  public TrueForAll(match: (item: T) => boolean): boolean {\n    let result = true;\n    for (let index = 0; index < this.Item.length && result === true; index++) {\n      const element = this.Item[index];\n      if (!match(element)) {\n        result = false;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Sorts the elements or a portion of the elements in the List<T> using either the specified or default IComparer<T> implementation or a provided Comparison<T> delegate to compare list elements.\n   * @param comparison \n   */\n  public Sort(comparison?: (item: T) => any): void {\n    if (comparison) {\n      this.Item.sort((a: T, b: T) => {\n        if (comparison(a) < comparison(b)) {\n          return -1;\n        } else if (comparison(a) > comparison(b)) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    } else {\n      this.Item.sort();\n    }\n  }\n\n  /**\n   * Inserts an element into the List<T> at the specified index.\n   * @param index \n   * @param item \n   */\n  public Insert(index: number, item: T): void {\n    if (index >= 0 && this.Item.length >= index) {\n      this.Item.splice(index, 0, item);\n      this.updateProperties();\n    } else {\n      throw new Error(`IndexOutOfRange - Range: 0-${this.Item.length} | Passed index: ${index}`);\n    }\n  }\n\n  /**\n   * Inserts the elements of a collection into the List<T> at the specified index.\n   * @param index \n   * @param collection \n   */\n  public InsertRange(index: number, collection: List<T>): void {\n    if (index >= 0 && this.Item.length >= index) {\n      for (let i = 0; i < collection.Count; i++) {\n        const element = collection.Item[i];\n        this.Item.splice(index + i, 0, element);\n      }\n      this.updateProperties();\n    } else {\n      throw new Error(`IndexOutOfRange - Range: 0-${this.Item.length} | Passed index: ${index}`);\n    }\n  }\n\n  /**\n   * Removes the first occurrence of a specific object from the List<T>.\n   * @param item \n   */\n  public Remove(item: T): boolean {\n    const itemIndex = this.IndexOf(item);\n    if (itemIndex >= 0) {\n      this.Item.splice(itemIndex, 1);\n      this.updateProperties();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Removes all the elements that match the conditions defined by the specified predicate.\n   * @param match \n   */\n  public RemoveAll(match: (item: T) => boolean): number {\n    let count = 0;\n    for (let index = 0; index < this.Item.length; index++) {\n      const element = this.Item[index];\n      if (match(element)) {\n        this.Remove(element);\n        index--;\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Removes the element at the specified index of the List<T>.\n   * @param index \n   */\n  public RemoveAt(index: number): void {\n    if (index >= 0 && this.Item.length >= index) {\n      this.Item.splice(index, 1);\n      this.updateProperties();\n    } else {\n      throw new Error(`IndexOutOfRange - Range: 0-${this.Item.length} | Passed index: ${index}`);\n    }\n  }\n\n  /**\n   * Removes a range of elements from the List<T>.\n   * @param index \n   * @param count \n   */\n  public RemoveRange(index: number, count: number): void {\n    if (index >= 0 && this.Item.length >= index && this.Item.length >= index + count) {\n      this.Item.splice(index, count);\n      this.updateProperties();\n    } else {\n      throw new Error(`IndexOutOfRange - Range: 0-${this.Item.length} | Passed index: ${index} | Passed count: ${count}`);\n    }\n  }\n\n  /**\n   * Reverses the order of the elements in the entire List<T>.\n   */\n  public Reverse(): void {\n    this.Item.reverse();\n  }\n\n  /**\n   * Reverses the order of the elements in the specified range.\n   * @param index \n   * @param count \n   */\n  public ReverseRange(index: number, count: number): void {\n    const arraySegment = this.Item.splice(index, count);\n    arraySegment.reverse();\n    this.InsertRange(index, new List<T>(arraySegment));\n  }\n\n  //#region Private implementation 'helpers'\n  private updateProperties(): void {\n    this.Count = this.Item.length;\n  }\n  //#endregion\n\n}\n"]}