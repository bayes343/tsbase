{"version":3,"file":"List.spec.js","sourceRoot":"","sources":["../../../../../tsbase/src/System/Collections/Generic/tests/List.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { List } from \"../List\";\n\ndescribe('List', () => {\n  let classUnderTest: List<any>;\n\n  beforeEach(() => {\n    classUnderTest = new List<string>();\n  });\n\n  it('should construct with no params', () => {\n    expect(classUnderTest).toBeDefined();\n  });\n\n  it('should be constructed with a parameter array - making a copy of the passed array', () => {\n    classUnderTest = new List<number>([1, 2, 3]);\n    expect(classUnderTest.Count).toEqual(3);\n\n    // Ensure array is copied\n    const newList = new List<number>(classUnderTest.Item);\n    classUnderTest.RemoveAt(classUnderTest.Count - 1);\n    expect(classUnderTest.Item.length).toEqual(2);\n    expect(newList.Item.length).toEqual(3);\n  });\n\n  it('should add objects to the collection', () => {\n    classUnderTest.Add('String1');\n    classUnderTest.Add('String2');\n    classUnderTest.Add('String3');\n    expect(classUnderTest.Count).toEqual(3);\n  });\n\n  it('should add a range of objects to the collection', () => {\n    classUnderTest.AddRange(['1', '2', '3']);\n    expect(classUnderTest.Count).toEqual(3);\n  });\n\n  it('should clear the collection', () => {\n    classUnderTest.AddRange(['1', '2', '3']);\n    classUnderTest.Clear();\n    expect(classUnderTest.Count).toEqual(0);\n  });\n\n  it('should evaluate if an item is contained within a collection', () => {\n    classUnderTest.AddRange(['1', '2', '3']);\n    const truthy = classUnderTest.Contains('1');\n    const falsy = classUnderTest.Contains('4');\n    expect(truthy).toBeTruthy();\n    expect(falsy).toBeFalsy();\n\n    // complex object\n    classUnderTest = new List<{ name: string, description: string }>();\n    const testObject = { name: 'Joey', description: 'Developer of this library' };\n    classUnderTest.Add(testObject);\n    const truthy2 = classUnderTest.Contains(testObject);\n    const falsy2 = classUnderTest.Contains({ name: 'Fake', description: 'does not exist' });\n    expect(truthy2).toBeTruthy();\n    expect(falsy2).toBeFalsy();\n  });\n\n  it('should copy contained elements to an array', () => {\n    const fullCopy: Array<string> = [];\n    classUnderTest.AddRange(['1', '2', '3']);\n    classUnderTest.CopyTo(fullCopy);\n    expect(fullCopy.length).toEqual(3);\n\n    const firstElement: Array<string> = [];\n    classUnderTest.CopyTo(firstElement, 0, 1);\n    expect(firstElement.length).toEqual(1);\n\n    const lastTwoElements: Array<string> = [];\n    classUnderTest.CopyTo(lastTwoElements, 1);\n    expect(lastTwoElements.length).toEqual(2);\n  });\n\n  it('should evaluate if an element exists based on the predicate passed', () => {\n    classUnderTest.AddRange(['1', '2', '3']);\n    const truthy = classUnderTest.Exists(item => item === '3');\n    expect(truthy).toBeTruthy();\n    const falsy = classUnderTest.Exists(item => item === '5');\n    expect(falsy).toBeFalsy();\n  });\n\n  it('should find an element that matches a predicate', () => {\n    classUnderTest.AddRange(['1', '2', '3']);\n    const match = classUnderTest.Find(item => item === '3');\n    expect(match).toBeTruthy();\n\n    const noMatch = classUnderTest.Find(item => item === '5');\n    expect(noMatch).toBeFalsy();\n  });\n\n  it('should find all / return all elements that match a predicate', () => {\n    classUnderTest.AddRange(['1', '2', '3', '21']);\n    const threeElements = classUnderTest.FindAll(item => item.length === 1);\n    expect(threeElements.Count).toEqual(3);\n  });\n\n  it('should find the index of the first element that matches a predicate', () => {\n    classUnderTest.AddRange(['1', '2', '3', '21']);\n    const zero = classUnderTest.FindIndex(item => item === '1');\n    expect(zero).toEqual(0);\n\n    // start index\n    const two = classUnderTest.FindIndex(item => item.length === 1, 2);\n    expect(two).toEqual(2);\n\n    // end range\n    const three = classUnderTest.FindIndex(item => item.length >= 2, 2, classUnderTest.Count);\n    expect(three).toEqual(3);\n\n    const notFound = classUnderTest.FindIndex(item => item === '0');\n    expect(notFound).toEqual(-1);\n  });\n\n  it('should find the last element that matches a predicate', () => {\n    classUnderTest.AddRange(['1', '2', '3']);\n    const match = classUnderTest.FindLast(item => item.length === 1);\n    expect(match).toEqual('3')\n\n    const noMatch = classUnderTest.FindLast(item => item === '5');\n    expect(noMatch).toBeFalsy();\n  });\n\n  it('should find the last index of the first element that matches a predicate', () => {\n    classUnderTest.AddRange(['1', '2', '3', '21']);\n    const zero = classUnderTest.FindLastIndex(item => item.length === 1);\n    expect(zero).toEqual(2);\n\n    // start index\n    const two = classUnderTest.FindLastIndex(item => item.length === 1, 2);\n    expect(two).toEqual(2);\n\n    // // end range\n    const three = classUnderTest.FindLastIndex(item => item.length >= 1, 0, classUnderTest.Count - 1);\n    expect(three).toEqual(3);\n\n    const notFound = classUnderTest.FindLastIndex(item => item === '0');\n    expect(notFound).toEqual(-1);\n  });\n\n  it('should apply an action foreach element in the list', () => {\n    // external scope\n    let counter = 0;\n    classUnderTest.AddRange(['1', '2', '3', '21']);\n    classUnderTest.ForEach(item => {\n      counter++\n    });\n    expect(counter).toEqual(4);\n\n    // internal scope\n    let currentValue = '';\n    classUnderTest.ForEach(item => {\n      currentValue = item;\n    });\n    expect(currentValue).toEqual('21');\n  });\n\n  it('should get a range of the list', () => {\n    classUnderTest.AddRange(['1', '2', '3', '21']);\n    const range = classUnderTest.GetRange(0, 2);\n    expect(range.Count).toEqual(2);\n  });\n\n  it('should return a new array if requested', () => {\n    classUnderTest.AddRange(['1', '2', '3', '21']);\n    const arrayOfList = classUnderTest.ToArray();\n    expect(arrayOfList.length).toEqual(4);\n  });\n\n  it('should evaluate whether a predicate matches all elements in the array', () => {\n    classUnderTest.AddRange(['1', '2', '3', '21']);\n    const truthy = classUnderTest.TrueForAll(item => item.length >= 1);\n    expect(truthy).toBeTruthy();\n    const falsy = classUnderTest.TrueForAll(item => item.length === 1);\n    expect(falsy).toBeFalsy();\n  });\n\n  it('should sort a list based on a comparison function', () => {\n    classUnderTest.AddRange(['2', '1', '3', '21', '0', '0']);\n    classUnderTest.Sort(item => parseInt(item));\n    expect(classUnderTest.Item[0]).toEqual('0');\n    expect(classUnderTest.Item[5]).toEqual('21');\n\n    classUnderTest.Clear();\n    classUnderTest.AddRange([1, 3, 8, 2, 1]);\n    classUnderTest.Sort();\n    expect(classUnderTest.Item[1]).toEqual(1);\n    expect(classUnderTest.Item[4]).toEqual(8);\n  });\n\n  it('should get the index of an item, considering any range passed', () => {\n    classUnderTest.AddRange(['2', '1', '3', '21', '0', '0']);\n    const indexTwo = classUnderTest.IndexOf('3');\n    expect(indexTwo).toEqual(2);\n\n    const notFound = classUnderTest.IndexOf('2', 2);\n    expect(notFound).toEqual(-1);\n  });\n\n  it('should get the last index of an item, considering any range passed', () => {\n    classUnderTest.AddRange(['3', '2', '1', '3', '21', '0', '0', '2']);\n    const indexTwo = classUnderTest.LastIndexOf('3');\n    expect(indexTwo).toEqual(3);\n\n    const notFound = classUnderTest.LastIndexOf('2', classUnderTest.Count - 2);\n    expect(notFound).toEqual(1);\n  });\n\n  it('should insert item into a the list at a specified index', () => {\n    classUnderTest.AddRange(['1', '3']);\n    classUnderTest.Insert(1, '2');\n    expect(classUnderTest.Item[1]).toEqual('2');\n\n    // error\n    expect(() => {\n      classUnderTest.Insert(5, '6');\n    }).toThrowError('IndexOutOfRange - Range: 0-3 | Passed index: 5');\n  });\n\n  it('should insert a range into the List at a specified index', () => {\n    classUnderTest.AddRange(['1', '5']);\n    classUnderTest.InsertRange(1, new List<string>(['2', '3', '4']));\n    expect(classUnderTest.Item[1]).toEqual('2');\n    expect(classUnderTest.Item[3]).toEqual('4');\n\n    // error\n    expect(() => {\n      classUnderTest.InsertRange(6, new List<string>(['2', '3', '4']));\n    }).toThrowError('IndexOutOfRange - Range: 0-5 | Passed index: 6');\n  });\n\n  it('should remove an element passed', () => {\n    classUnderTest.AddRange(['1', '2', '3']);\n    classUnderTest.Remove('2');\n    expect(classUnderTest.Item[1]).toEqual('3');\n    expect(classUnderTest.Remove('2')).toBeFalsy();\n  });\n\n  it('should remove all items that match the passed predicate', () => {\n    classUnderTest.AddRange(['1', '2', '3']);\n    const count = classUnderTest.RemoveAll(item => parseInt(item) > 1);\n    expect(count).toEqual(2);\n    expect(classUnderTest.Count).toEqual(1);\n  });\n\n  it('should remove an element at a given index', () => {\n    classUnderTest.AddRange(['1', '2', '3']);\n    classUnderTest.RemoveAt(1);\n    expect(classUnderTest.Count).toEqual(2);\n    expect(classUnderTest.Item[1]).toEqual('3');\n\n    // error\n    expect(() => {\n      classUnderTest.RemoveAt(3);\n    }).toThrowError('IndexOutOfRange - Range: 0-2 | Passed index: 3');\n  });\n\n  it('should remove a range from the list based on the passed paramaters', () => {\n    classUnderTest.AddRange(['1', '2', '3', '4', '5']);\n    classUnderTest.RemoveRange(0, 2);\n    expect(classUnderTest.Item[0]).toEqual('3');\n\n    // error\n    expect(() => {\n      classUnderTest.RemoveRange(0, 5);\n    }).toThrowError('IndexOutOfRange - Range: 0-3 | Passed index: 0 | Passed count: 5');\n  });\n\n  it('should remove a range of elements from the list', () => {\n    classUnderTest.AddRange(['1', '2', '3', '4', '5']);\n    classUnderTest.RemoveRange(1, 3);\n    expect(classUnderTest.Count).toEqual(2);\n  });\n\n  it('should reverse the elements in the list', () => {\n    classUnderTest.AddRange(['1', '2', '3', '4', '5']);\n    classUnderTest.Reverse();\n    expect(classUnderTest.Item[0]).toEqual('5');\n    expect(classUnderTest.Item[4]).toEqual('1');\n  });\n\n  it('should reverse a range of elements within the list', () => {\n    classUnderTest.AddRange(['1', '2', '3', '4', '5']);\n    classUnderTest.ReverseRange(1, 3);\n    expect(classUnderTest.Item[0]).toEqual('1');\n    expect(classUnderTest.Item[1]).toEqual('4');\n    expect(classUnderTest.Item[3]).toEqual('2');\n  });\n\n});\n\n"]}