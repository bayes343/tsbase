{"version":3,"file":"HttpClient.js","sourceRoot":"","sources":["../../../../tsbase/src/System/Net/Http/HttpClient.ts"],"names":[],"mappings":";AAAA,MAAM;IAAN;QACE;;WAEG;QACI,gBAAW,GAAW,EAAE,CAAC;QAChC;;WAEG;QACI,0BAAqB,GAA0C,EAAE,CAAC;QACzE;;WAEG;QACI,iCAA4B,GAAW,CAAC,CAAC;QAChD;;WAEG;QACI,YAAO,GAAW,EAAE,CAAC;QAiE5B,YAAY;IAEd,CAAC;IAjEQ,qBAAqB;QAC1B,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IAEM,WAAW;QAChB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;IAEM,OAAO;QACZ,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IAED;;;OAGG;IACU,QAAQ,CAAC,GAAW;;YAC/B,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC3C,MAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;gBACjC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;gBAC3B,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC7C,GAAG,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBAC3C,GAAG,CAAC,IAAI,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAEM,iBAAiB;QACtB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAC3D,CAAC;IAEM,cAAc;QACnB,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACxD,CAAC;IAEM,cAAc;QACnB,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACxD,CAAC;IAEM,UAAU;QACf,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAEM,SAAS;QACd,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;IACnD,CAAC;IAEM,QAAQ;QACb,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClD,CAAC;IAEM,SAAS;QACd,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;IACnD,CAAC;IAED,iBAAiB;IACT,aAAa;QACnB,IAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;QAC/B,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3C,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;CAGF","sourcesContent":["export class HttpClient {\n  /**\n   * Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.\n   */\n  public BaseAddress: string = '';\n  /**\n   * Gets the headers which should be sent with each request.\n   */\n  public DefaultRequestHeaders: Array<{ key: string, value: string }> = [];\n  /**\n   * Gets or sets the maximum number of bytes to buffer when reading the response content.\n   */\n  public MaxResponseContentBufferSize: number = 0;\n  /**\n   * Gets or sets the time in seconds to wait before the request times out.\n   */\n  public Timeout: number = 10;\n\n  public CancelPendingRequests() {\n    throw new Error('CancelPendingRequests not yet implemented');\n  }\n\n  public DeleteAsync() {\n    throw new Error('DeleteAsync not yet implemented');\n  }\n\n  public Dispose() {\n    throw new Error('Dispose not yet implemented');\n  }\n\n  /**\n   * Send a GET request to the specified Uri as an asynchronous operation.\n   * @param uri \n   */\n  public async GetAsync(uri: string): Promise<any> {\n    return await new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", uri, true);\n      xhr.onload = () => resolve(xhr.responseText);\n      xhr.onerror = () => reject(xhr.statusText);\n      xhr.send();\n    });\n  }\n\n  public GetByteArrayAsync() {\n    throw new Error('GetByteArrayAsync not yet implemented');\n  }\n\n  public GetStreamAsync() {\n    throw new Error('GetStreamAsync not yet implemented');\n  }\n\n  public GetStringAsync() {\n    throw new Error('GetStringAsync not yet implemented');\n  }\n\n  public PatchAsync() {\n    throw new Error('PatchAsync not yet implemented');\n  }\n\n  public PostAsync() {\n    throw new Error('PostAsync not yet implemented');\n  }\n\n  public PutAsync() {\n    throw new Error('PutAsync not yet implemented');\n  }\n\n  public SendAsync() {\n    throw new Error('SendAsync not yet implemented');\n  }\n\n  //#region Helpers\n  private getXhrRequest(): XMLHttpRequest {\n    var xhr = new XMLHttpRequest();\n    xhr.timeout = this.Timeout * 1000;\n    this.DefaultRequestHeaders.forEach(element => {\n      xhr.setRequestHeader(element.key, element.value);\n    });\n    return xhr;\n  }\n  //#endregion\n\n}"]}