{"version":3,"file":"Enumerable.spec.js","sourceRoot":"","sources":["../../../../tsbase/src/System/Linq/tests/Enumerable.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,gCAAgC,CAAC;AAEtD,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,IAAI,cAAyB,CAAC;IAE9B,UAAU,CAAC,GAAG,EAAE;QACd,cAAc,GAAG,IAAI,IAAI,EAAU,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAEnC,cAAc,CAAC,KAAK,EAAE,CAAC;QACvB,cAAc,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACnD,MAAM,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1E,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;QAC1E,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,cAAc,CAAC,iBAAiB,EAAE,CAAC;QACnD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAEnC,cAAc,CAAC,KAAK,EAAE,CAAC;QACvB,cAAc,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACnD,MAAM,gBAAgB,GAAG,cAAc,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpF,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,YAAY;QACZ,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;YAC1C,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;YAC1C,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;YAC1C,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;YAC1C,EAAE,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;SAC3C,CAAC,CAAC;QACH,MAAM,YAAY,GAAG,cAAc,CAAC,OAAO,CAAC;YAC1C,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ;YACrB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS;YACtB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG;SACjB,CAAC,CAAC;QACH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAE7C,aAAa;QACb,MAAM,YAAY,GAAG,cAAc,CAAC,iBAAiB,CAAC;YACpD,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG;YAChB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS;YACtB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ;SACtB,CAAC,CAAC;QACH,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2FAA2F,EAAE,GAAG,EAAE;QACnG,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,MAAM,EAAE;YAChB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,SAAS,EAAE;SACpB,CAAC,CAAC;QACH,MAAM,KAAK,GAAG,cAAc;aACzB,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;aACpC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,MAAM,EAAE;YAChB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,SAAS,EAAE;SACpB,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAChE,MAAM,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,MAAM,EAAE;YAChB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,SAAS,EAAE;SACpB,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;QACjE,MAAM,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,MAAM,EAAE;YAChB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,SAAS,EAAE;SACpB,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;QAC7E,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;SACvB,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAE,MAA+C,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,cAAc,CAAC,KAAK,EAAE,CAAC;QACvB,MAAM,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QACzE,MAAM,CAAE,SAA8C,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAEzE,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;SACvB,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACnE,MAAM,CAAE,SAAkD,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE7E,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAChE,MAAM,CAAE,MAA+C,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;SACvB,CAAC,CAAC;QACH,MAAM,gBAAgB,GAAG,cAAc,CAAC,QAAQ,EAAE,CAAC;QACnD,MAAM,CAAE,gBAAiD,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;SACvB,CAAC,CAAC;QACH,MAAM,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAE,KAA8C,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;QAC1E,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;SACvB,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACjE,MAAM,CAAE,OAAgD,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yFAAyF,EAAE,GAAG,EAAE;QACjG,qBAAqB;QACrB,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,KAAK,GAAG,cAAc,CAAC,SAAS,CACpC,CAAC,EACD,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAClD,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CACxB,CAAC;QACF,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAE3B,qBAAqB;QACrB,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS,CACrC,CAAC,EACD,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,OAAO,GAAG,IAAI,EACjC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CACxB,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0EAA0E,EAAE,GAAG,EAAE;QAClF,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,EAAE,CAAC;QACpC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAE9B,QAAQ;QACR,cAAc,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACjC,MAAM,CAAC,GAAG,EAAE;YACV,cAAc,CAAC,GAAG,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC,YAAY,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8EAA8E,EAAE,GAAG,EAAE;QACtF,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,GAAG,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;QACrC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvB,kBAAkB;QAClB,cAAc,CAAC,KAAK,EAAE,CAAA;QACtB,cAAc,CAAC,QAAQ,CAAC;YACtB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,MAAM,EAAE;YAChB,EAAE,IAAI,EAAE,OAAO,EAAE;YACjB,EAAE,IAAI,EAAE,SAAS,EAAE;SACpB,CAAC,CAAC;QACH,MAAM,aAAa,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvE,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEpC,QAAQ;QACR,cAAc,CAAC,KAAK,EAAE,CAAC;QACvB,MAAM,CAAC,GAAG,EAAE;YACV,cAAc,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC,YAAY,CAAC,gEAAgE,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { List } from '../../Collections/Generic/List';\n\ndescribe('Enumerable', () => {\n  let classUnderTest: List<any>;\n\n  beforeEach(() => {\n    classUnderTest = new List<string>();\n  });\n\n  it('should query for results WHERE a condition is met', () => {\n    classUnderTest.AddRange([1, 2, 3, 4, 5]);\n    const results = classUnderTest.Where(item => item > 2);\n    expect(results.Item.length).toEqual(3);\n    expect(classUnderTest.Count).toEqual(5);\n  });\n\n  it('should orderby a predicate or the default comparer', () => {\n    classUnderTest.AddRange([4, 5, 1, 3, 1]);\n    const results = classUnderTest.OrderBy();\n    expect(results.Item[0]).toEqual(1);\n    expect(results.Item[4]).toEqual(5);\n\n    classUnderTest.Clear();\n    classUnderTest.AddRange(['4', '5', '1', '3', '1']);\n    const resultsPredicate = classUnderTest.OrderBy([item => parseInt(item)]);\n    expect(resultsPredicate.Item[0]).toEqual('1');\n    expect(resultsPredicate.Item[4]).toEqual('5');\n  });\n\n  it('should orderby descending by a predicate or the default comparer', () => {\n    classUnderTest.AddRange([4, 5, 1, 3, 1]);\n    const results = classUnderTest.OrderByDescending();\n    expect(results.Item[0]).toEqual(5);\n    expect(results.Item[4]).toEqual(1);\n\n    classUnderTest.Clear();\n    classUnderTest.AddRange(['4', '5', '1', '3', '1']);\n    const resultsPredicate = classUnderTest.OrderByDescending([item => parseInt(item)]);\n    expect(resultsPredicate.Item[0]).toEqual('5');\n    expect(resultsPredicate.Item[4]).toEqual('1');\n  });\n\n  it('should orderby many funcs by descending precedence', () => {\n    // ascending\n    classUnderTest.AddRange([\n      { lastName: 'A', firstName: 'Z', age: 18 },\n      { lastName: 'A', firstName: 'Y', age: 24 },\n      { lastName: 'C', firstName: 'X', age: 19 },\n      { lastName: 'C', firstName: 'W', age: 26 },\n      { lastName: 'E', firstName: 'V', age: 32 }\n    ]);\n    const lastFirstAge = classUnderTest.OrderBy([\n      item => item.lastName,\n      item => item.firstName,\n      item => item.age\n    ]);\n    expect(lastFirstAge.Item[0].age).toEqual(24);\n\n    // descending\n    const ageFirstLast = classUnderTest.OrderByDescending([\n      item => item.age,\n      item => item.firstName,\n      item => item.lastName\n    ]);\n    expect(ageFirstLast.Item[0].age).toEqual(32);\n  });\n\n  it('should find results where a condition is met and return them based on a user defined sort', () => {\n    classUnderTest.AddRange([\n      { name: 'Billy' },\n      { name: 'Adam' },\n      { name: 'David' },\n      { name: 'Charley' }\n    ]);\n    const query = classUnderTest\n      .Where(item => item.name.length >= 3)\n      .OrderBy([item => item.name]).ToList();\n    expect(query.Item[0].name).toEqual('Adam');\n    expect(query.Item[3].name).toEqual('David');\n  });\n\n  it('should know if all items satisfy a condition', () => {\n    classUnderTest.AddRange([\n      { name: 'Billy' },\n      { name: 'Adam' },\n      { name: 'David' },\n      { name: 'Charley' }\n    ]);\n    const truthy = classUnderTest.All(item => item.name.length > 1);\n    const falsy = classUnderTest.All(item => item.name === 'Billy');\n    expect(truthy).toBeTruthy();\n    expect(falsy).toBeFalsy();\n  });\n\n  it('should know if any items satisfy a condition', () => {\n    classUnderTest.AddRange([\n      { name: 'Billy' },\n      { name: 'Adam' },\n      { name: 'David' },\n      { name: 'Charley' }\n    ]);\n    const truthy = classUnderTest.Any(item => item.name === 'Billy');\n    const falsy = classUnderTest.Any(item => item.name.length > 15);\n    expect(truthy).toBeTruthy();\n    expect(falsy).toBeFalsy();\n  });\n\n  it('should return the enumerable as a list', () => {\n    classUnderTest.AddRange([\n      { name: 'Billy' },\n      { name: 'Adam' },\n      { name: 'David' },\n      { name: 'Charley' }\n    ]);\n    const newList = classUnderTest.Where(item => item.name === 'David').ToList();\n    expect(newList.Exists(item => item.name === 'David'));\n  });\n\n  it('should take a sequence of items', () => {\n    classUnderTest.AddRange([\n      { key: '1', value: 1 },\n      { key: '2', value: 2 },\n      { key: '3', value: 3 },\n      { key: '4', value: 4 },\n      { key: '5', value: 5 },\n      { key: '6', value: 6 },\n      { key: '7', value: 7 }\n    ]);\n    const first3 = classUnderTest.Take(3);\n    expect((first3 as List<{ key: string, value: number }>).Count).toEqual(3);\n  });\n\n  it('should take items while a condition is met', () => {\n    classUnderTest.Clear();\n    const emptyList = classUnderTest.TakeWhile(item => item.key.length >= 1);\n    expect((emptyList as List<{ key: '', value: number }>).Count).toEqual(0);\n\n    classUnderTest.AddRange([\n      { key: '1', value: 1 },\n      { key: '2', value: 2 },\n      { key: '3', value: 3 },\n      { key: '4', value: 4 },\n      { key: '5', value: 5 },\n      { key: '6', value: 6 },\n      { key: '7', value: 7 }\n    ]);\n\n    const noMatches = classUnderTest.TakeWhile(item => item.value < 1);\n    expect((noMatches as List<{ key: string, value: number }>).Count).toEqual(0);\n\n    const first4 = classUnderTest.TakeWhile(item => item.value < 5);\n    expect((first4 as List<{ key: string, value: number }>).Count).toEqual(4);\n  });\n\n  it('should return distinct elements from the enumerable collection', () => {\n    classUnderTest.AddRange([\n      { key: '1', value: 1 },\n      { key: '1', value: 1 },\n      { key: '1', value: 2 },\n      { key: '2', value: 2 },\n      { key: '2', value: 2 },\n      { key: '2', value: 3 }\n    ]);\n    const distinctElements = classUnderTest.Distinct();\n    expect((distinctElements as List<{ key: '2', value: 3 }>).Count).toEqual(4);\n  });\n\n  it('should skip a sequence of items and return the rest', () => {\n    classUnderTest.AddRange([\n      { key: '1', value: 1 },\n      { key: '1', value: 1 },\n      { key: '1', value: 2 },\n      { key: '2', value: 2 },\n      { key: '2', value: 2 },\n      { key: '2', value: 3 }\n    ]);\n    const last3 = classUnderTest.Skip(3);\n    expect((last3 as List<{ key: string, value: number }>).Count).toEqual(3);\n  });\n\n  it('should skip items while a condition is true then return the rest', () => {\n    classUnderTest.AddRange([\n      { key: '1', value: 1 },\n      { key: '1', value: 1 },\n      { key: '1', value: 2 },\n      { key: '2', value: 2 },\n      { key: '2', value: 2 },\n      { key: '2', value: 3 }\n    ]);\n    const oneItem = classUnderTest.SkipWhile(item => item.value < 3);\n    expect((oneItem as List<{ key: string, value: number }>).Count).toEqual(1);\n  });\n\n  it('should aggregate the elements based on input parameter accumulator and result functions', () => {\n    // custom aggregation\n    classUnderTest.AddRange([1, 1, 2, 2, 2, 3]);\n    const three = classUnderTest.Aggregate(\n      1,\n      (largest, next) => largest > next ? largest : next,\n      item => item.toString()\n    );\n    expect(three).toEqual('3');\n\n    // simple aggregation\n    const eleven = classUnderTest.Aggregate(\n      0,\n      (current, next) => current + next,\n      item => item.toString()\n    );\n    expect(eleven).toEqual('11');\n  });\n\n  it('should sum the value of elements as numbers or based on a given function', () => {\n    classUnderTest.AddRange([1, 1, 2, 2, 2, 3]);\n    const eleven = classUnderTest.Sum();\n    expect(eleven).toEqual(11);\n    const twentyTwo = classUnderTest.Sum(item => item * 2);\n    expect(twentyTwo).toEqual(22);\n\n    // error\n    classUnderTest.Add('notanumber');\n    expect(() => {\n      classUnderTest.Sum();\n    }).toThrowError('Could not parse \\'notanumber\\' as a number');\n  });\n\n  it('should average the value of elements as numbers or based on a given function', () => {\n    classUnderTest.AddRange([2, 2, 2, 2, 2, 2]);\n    const two = classUnderTest.Average();\n    expect(two).toEqual(2);\n    // Custom use case\n    classUnderTest.Clear()\n    classUnderTest.AddRange([\n      { name: 'Billy' },\n      { name: 'Adam' },\n      { name: 'David' },\n      { name: 'Charley' }\n    ]);\n    const averageLength = classUnderTest.Average(item => item.name.length);\n    expect(averageLength).toEqual(5.25);\n\n    // error\n    classUnderTest.Clear();\n    expect(() => {\n      classUnderTest.Average();\n    }).toThrowError('Cannot calculate an average from a collection with no elements');\n  });\n});\n\n"]}