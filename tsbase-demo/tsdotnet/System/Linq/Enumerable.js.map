{"version":3,"file":"Enumerable.js","sourceRoot":"","sources":["../../../tsbase/src/System/Linq/Enumerable.ts"],"names":[],"mappings":"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","sourcesContent":["import { List } from '../Collections/Generic/List';\n\nexport abstract class Enumerable<T> {\n  /**\n   * Enumerable implementation\n   */\n  public Item: Array<T> = new Array<T>();\n\n  /**\n   * Each extender should define how it should be cloned *structurally* - allows functional chaining of a data structure that maintains state\n   * @param item \n   */\n  protected abstract Clone(item: Array<T>): Enumerable<T>;\n\n  /**\n   * Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.\n   * @param seed \n   * @param func \n   */\n  public Aggregate<TResult, TAccumulate>(\n    seed: TAccumulate,\n    func: (current: TAccumulate, next: T) => TAccumulate,\n    resultSelector: (item: TAccumulate) => TResult\n  ): TResult {\n    let value = seed;\n    for (let index = 0; index < this.Item.length; index++) {\n      value = func(value, this.Item[index]);\n    }\n    return resultSelector(value);\n  }\n\n  /**\n   * Determines whether all elements of a sequence satisfy a condition.\n   * @param func \n   */\n  public All(func: (item: T) => boolean): boolean {\n    const itemsThatSatisfy = this.Item.filter(func);\n    return itemsThatSatisfy.length === this.Item.length;\n  }\n\n  /**\n   * Determines whether any element of a sequence exists or satisfies a condition.\n   * @param func \n   */\n  public Any(func: (item: T) => boolean): boolean {\n    const itemsThatSatisfy = this.Item.filter(func);\n    return itemsThatSatisfy.length >= 1 ? true : false;\n  }\n\n  /**\n   * Computes the average of a sequence of numeric values, or the average result of the given function\n   * @param func \n   */\n  public Average(func?: (item: T) => any): number {\n    if (this.Item.length >= 1) {\n      let average = 0;\n      if (func) {\n        average = this.Sum(func) / this.Item.length;\n      } else {\n        average = this.Sum() / this.Item.length;\n      }\n      return average;\n    } else {\n      throw new Error('Cannot calculate an average from a collection with no elements');\n    }\n  }\n\n  /**\n   * Computes the sum of a sequence of numeric values, or the sum result of the given function\n   * @param func \n   */\n  public Sum(func?: (item: T) => number): number {\n    let sum = 0;\n    if (func) {\n      this.Item.forEach(element => {\n        sum += func(element);\n      });\n    } else {\n      this.Item.forEach(element => {\n        const tNumber = parseFloat(element.toString());\n        if (isNaN(tNumber)) {\n          throw new Error(`Could not parse \\'${element}\\' as a number`);\n        }\n        sum += tNumber;\n      });\n    }\n    return sum;\n  }\n\n  /**\n   * Filters a sequence of values based on a predicate.\n   * @param func \n   */\n  public Where(func: (item: T) => boolean): Enumerable<T> {\n    const collection: Enumerable<T> = this.Clone(this.Item);\n    collection.Item = collection.Item.filter(func);\n    return collection;\n  }\n\n  /**\n   * Sorts the elements of a sequence in ascending order based on the default comparer or user defined function(s)\n   * @param funcs \n   */\n  public OrderBy(funcs?: Array<(item: T) => any>): Enumerable<T> {\n    const collection = this.Clone(this.Item);\n    if (!funcs) {\n      collection.Item.sort();\n    } else {\n      collection.Item.sort((a: T, b: T) => {\n        let result = 0;\n        for (let index = 0; index < funcs.length; index++) {\n          const func = funcs[index];\n          if (func(a) < func(b)) {\n            result = -1;\n            break;\n          } else if (func(a) > func(b)) {\n            result = 1;\n            break;\n          }\n        }\n        return result;\n      });\n    }\n    return collection;\n  }\n\n  /**\n   * Sorts the elements of a sequence in descending order.\n   * @param func \n   */\n  public OrderByDescending(funcs?: Array<(item: T) => any>): Enumerable<T> {\n    let collection: Enumerable<T>;\n    if (funcs) {\n      collection = this.OrderBy(funcs);\n    }\n    collection = this.OrderBy();\n    collection.Item.reverse();\n    return collection;\n  }\n\n  /**\n   * Creates a List<T> from an IEnumerable<T>.\n   */\n  public ToList(): List<T> {\n    return new List<T>(this.Item);\n  }\n\n  /**\n   * Creates an array from a IEnumerable<T>.\n   */\n  public ToArray(): Array<T> {\n    let newItemArray = new Array<T>();\n    newItemArray = newItemArray.concat(this.Item);\n    return newItemArray;\n  }\n\n  /**\n   * Returns a specified number of contiguous elements from the start of a sequence.\n   * @param count \n   */\n  public Take(count: number): Enumerable<T> {\n    const itemsToTake = this.Item.slice(0, count);\n    const enumerableToReturn = this.Clone(itemsToTake);\n    return enumerableToReturn;\n  }\n\n  /**\n   * Returns elements from a sequence as long as a specified condition is true.\n   * @param func \n   */\n  public TakeWhile(func: (item: T) => boolean): Enumerable<T> {\n    const itemsToReturn = [];\n    let index = 0;\n    let conditionPassed = true;\n    do {\n      if (this.Item.length - 1 >= index) {\n        const element = this.Item[index];\n        if (func(element)) {\n          itemsToReturn.push(element);\n        } else {\n          conditionPassed = false;\n        }\n        index++;\n      } else {\n        conditionPassed = false;\n      }\n    } while (conditionPassed);\n    return this.Clone(itemsToReturn);\n  }\n\n  /**\n   * Returns distinct elements from a sequence.\n   * @param func \n   */\n  public Distinct(): Enumerable<T> {\n    const itemsToReturn = [];\n    for (let index = 0; index < this.Item.length; index++) {\n      const element = this.Item[index];\n      const stringifiedItems = JSON.stringify(itemsToReturn);\n      if (stringifiedItems.indexOf(JSON.stringify(element)) === -1) {\n        itemsToReturn.push(element);\n      }\n    }\n    return this.Clone(itemsToReturn);\n  }\n\n  /**\n   * Bypasses a specified number of elements in a sequence and then returns the remaining elements.\n   * @param count \n   */\n  public Skip(count: number): Enumerable<T> {\n    const itemsToReturn = this.Item.slice(count, this.Item.length);\n    return this.Clone(itemsToReturn);\n  }\n\n  /**\n   * Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.\n   * @param func \n   */\n  public SkipWhile(func: (item: T) => boolean): Enumerable<T> {\n    let startIndex = 0;\n    for (let index = 0; index < this.Item.length && startIndex === 0; index++) {\n      const element = this.Item[index];\n      if (!func(element)) {\n        startIndex = index;\n      }\n    }\n    const itemsToReturn = this.Item.slice(startIndex, this.Item.length);\n    return this.Clone(itemsToReturn);\n  }\n\n}"]}